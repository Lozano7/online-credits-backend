// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCredits.Infrastructure.Data;

#nullable disable

namespace OnlineCredits.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("OnlineCredits.Core.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.CreditEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutomaticEvaluation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreditRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EvaluatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManualEvaluation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditRequestId");

                    b.ToTable("CreditEvaluations", (string)null);
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.CreditRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ApprovedAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentDebt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EvaluatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MonthlyPayment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TermInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkSeniority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("CreditRequests", (string)null);
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreditRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditRequestId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("OnlineCredits.Core.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.CreditEvaluation", b =>
                {
                    b.HasOne("OnlineCredits.Core.Entities.CreditRequest", "CreditRequest")
                        .WithMany("CreditEvaluations")
                        .HasForeignKey("CreditRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditRequest");
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.CreditRequest", b =>
                {
                    b.HasOne("OnlineCredits.Core.Entities.User", "Analyst")
                        .WithMany()
                        .HasForeignKey("EvaluatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineCredits.Core.Entities.User", "User")
                        .WithMany("CreditRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Analyst");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.Document", b =>
                {
                    b.HasOne("OnlineCredits.Core.Entities.CreditRequest", "CreditRequest")
                        .WithMany("Documents")
                        .HasForeignKey("CreditRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditRequest");
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.CreditRequest", b =>
                {
                    b.Navigation("CreditEvaluations");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("OnlineCredits.Core.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CreditRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
